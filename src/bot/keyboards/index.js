const { InlineKeyboard } = require('grammy');

class Keyboards {
  static mainMenu() {
    return new InlineKeyboard()
      .text('üÜò Help', 'help')
      .text('üìñ Instructions', 'instructions')
      .row()
      .text('ü§ù Start Deal', 'start_deal')
      .text('üìä Stats', 'stats')
      .row()
      .text('üë§ Profile', 'profile')
      .text('üîó Referral', 'referral');
  }

  static helpMenu() {
    return new InlineKeyboard()
      .text('üìã Commands', 'help_commands')
      .text('‚ùì FAQ', 'help_faq')
      .row()
      .text('üìû Contact Support', 'help_support')
      .text('üîô Back', 'main_menu');
  }

  static dealActions(dealId, userRole) {
    const keyboard = new InlineKeyboard();
    
    if (userRole === 'buyer') {
      keyboard
        .text('üí∞ Release Funds', `release_${dealId}`)
        .text('‚è∞ Extend Time', `extend_${dealId}`)
        .row();
    }
    
    keyboard
      .text('üìä Deal Status', `status_${dealId}`)
      .text('üö´ Cancel', `cancel_${dealId}`)
      .row()
      .text('‚ö†Ô∏è Dispute', `dispute_${dealId}`)
      .text('üìù Report', `report_${dealId}`);
    
    return keyboard;
  }

  static cryptoSelection() {
    return new InlineKeyboard()
      .text('‚Çø Bitcoin (BTC)', 'crypto_btc')
      .text('ü™ô Litecoin (LTC)', 'crypto_ltc')
      .row()
      .text('üîô Back', 'main_menu');
  }

  static confirmAction(action, data) {
    return new InlineKeyboard()
      .text('‚úÖ Confirm', `confirm_${action}_${data}`)
      .text('‚ùå Cancel', `cancel_${action}`);
  }

  static adminPanel() {
    return new InlineKeyboard()
      .text('üìä Dashboard', 'admin_dashboard')
      .text('üë• Users', 'admin_users')
      .row()
      .text('ü§ù Deals', 'admin_deals')
      .text('‚ö†Ô∏è Reports', 'admin_reports')
      .row()
      .text('üì¢ Broadcast', 'admin_broadcast')
      .text('‚öôÔ∏è Settings', 'admin_settings');
  }

  static dealSetup() {
    return new InlineKeyboard()
      .text('üë§ Set Participants', 'setup_participants')
      .text('üí∞ Set Amount', 'setup_amount')
      .row()
      .text('‚è∞ Set Timeout', 'setup_timeout')
      .text('‚úÖ Create Deal', 'create_deal')
      .row()
      .text('üîô Back', 'main_menu');
  }

  static walletActions() {
    return new InlineKeyboard()
      .text('üìù Set Wallet', 'set_wallet')
      .text('üëÅÔ∏è View Wallet', 'view_wallet')
      .row()
      .text('‚úÖ Verify Wallet', 'verify_wallet')
      .text('üîô Back', 'main_menu');
  }

  static pagination(currentPage, totalPages, prefix) {
    const keyboard = new InlineKeyboard();
    
    if (currentPage > 1) {
      keyboard.text('‚¨ÖÔ∏è', `${prefix}_page_${currentPage - 1}`);
    }
    
    keyboard.text(`${currentPage}/${totalPages}`, 'noop');
    
    if (currentPage < totalPages) {
      keyboard.text('‚û°Ô∏è', `${prefix}_page_${currentPage + 1}`);
    }
    
    return keyboard.row().text('üîô Back', 'main_menu');
  }

  static dealCreatedKeyboard(inviteLink) {
    return new InlineKeyboard()
      .url('üîó Share Group Link', inviteLink)
      .row()
      .text('üîô Main Menu', 'main_menu');
  }

  static closeKeyboard() {
    return new InlineKeyboard().text('‚ùå Close', 'close');
  }

  static backButton(callback = 'main_menu') {
    return new InlineKeyboard().text('üîô Back', callback);
  }
}

module.exports = { Keyboards };
